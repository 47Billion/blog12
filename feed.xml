<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title><![CDATA[47Billion Blog]]></title>
    <link>http://47billion.com/blog/</link>
    <atom:link href="/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <description><![CDATA[]]></description>
    <pubDate>Tue, 28 Jul 2015 08:05:58 GMT</pubDate>
    <generator>http://zespia.tw/hexo/</generator>
    
    <item>
      <title><![CDATA[Step into a Digital World]]></title>
      <link>http://47billion.com/blog/2015/07/27/step-into-a-digital-world/</link>
      <guid>http://47billion.com/blog/2015/07/27/step-into-a-digital-world/</guid>
      <pubDate>Mon, 27 Jul 2015 12:30:00 GMT</pubDate>
      <description>
      <![CDATA[<img class=" img" width="600" height="340" src="/blog/2015/07/27/step-into-a-digital-world/ds1.png"></img>

<p>Need of the hour is old schoo]]>
      </description>
      <content:encoded><![CDATA[<img class=" img" width="600" height="340" src="/blog/2015/07/27/step-into-a-digital-world/ds1.png"></img>

<p>Need of the hour is old school, it is the need of the minute that decides who will win. The game referred here is to engage more customers around the web of your products. Technology may prove a vital aid in endeavor to win the game. It thus becomes imperative to incorporate contemporary marketing and service means. Stuff is moving on mobile and computing devices. If not on a screen(that too; high definition!) it is not really a shout or a scream. And there comes the need of digital displays or as we call it Digital Signage.</p>
<p>Digital Signage offers perfect tools to inform, interact and engage the existing as well as the future customers. Serving to the need of the minute it encompasses varied attributes like technology, readiness, accessibility,interactiveness and availability of information. Laden with information it can cater to numerous industries. Be it hospitality, retail, mall, hospital, corporate; all would find an efficient use of this technology innovation.</p>
<h3 id="En-route_to_Digitization">En-route to Digitization</h3>
<p>The umbrella of Digital signage covers many products in which digital display screens, stand-alone kiosks, interactive kiosks, video-walls, digital menu boards have a widespread usage. Right from the entry to the exit they can guide your customers in and out of almost everything. Fill it with product information, the location map, options to buy, or options to add testimonials and experience the magical feel of digital advertising with an efficient mode of brand awareness and servicing.</p>
<img class=" img" width="600" height="300" src="/blog/2015/07/27/step-into-a-digital-world/ds2.png"></img>

<p>With high definition display and information sharing it leaves a lingering image on the eye of the beholder. It is proven as an effective interface for networking and customer engagement. It can be controlled from one place located in any part of the world. With latest theme and content update, it will allow you to attract more eyes and captivate more customers.</p>
<h3 id="Go_Digital">Go Digital</h3>
<p>With Digital Signage you can hope for a considerable difference in your revenue numbers. It will help you to reduce the regular expenses on updating the static standee boards and displays.</p>
<p>With the relevant showcase of your services, products or information, you certainly will be placed on a higher hierarchy when it comes to the brand imagery thus proving an excellent brand positioning tool. Higher brand value and a soothing customer experience: revenue numbers have to go up. </p>
<img class=" img" width="600" height="310" src="/blog/2015/07/27/step-into-a-digital-world/ds3.png"></img>

<h3 id="About_47Billion:">About 47Billion:</h3>
<p>A strategic partner with LSquared Networks; 47Billion is a Digital Signage Solution provider that is it can take care of the complete life cycle processes for Digital Signage. Having 5+ years of experience in handling international clients it guarantees turnkey Digital Solutions as per your need.</p>
<p>So, to benefit and align with the latest mode of digital advertising you can contact us on <a href="mailto:sales@47Billion.com" target="_blank" rel="external">sales@47Billion.com</a> or to the below people, who would be happy to serve your queries. </p>
<p>Namrata Baranwal: 07024127309</p>
<p>Vipul Mehrotra: 09229268681</p>
]]></content:encoded>
      <comments>http://47billion.com/blog/2015/07/27/step-into-a-digital-world/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Fun with Singleton (Python, Javascript, Java)]]></title>
      <link>http://47billion.com/blog/2015/02/04/fun-with-singleton-python-javascript-and-java/</link>
      <guid>http://47billion.com/blog/2015/02/04/fun-with-singleton-python-javascript-and-java/</guid>
      <pubDate>Wed, 04 Feb 2015 18:19:56 GMT</pubDate>
      <description>
      <![CDATA[<p>They say that Singletons, like global variables, are evil. They hide dependencies; are harder to test and even harder to extend. Singleto]]>
      </description>
      <content:encoded><![CDATA[<p>They say that Singletons, like global variables, are evil. They hide dependencies; are harder to test and even harder to extend. Singletons are lies, and it’s best to keep away from them. But, there are scenarios where you need them. For example, when you want a shared resource like printer spooler or file manager or log manager, you want a single object to handle requests from all the various parts of your application.</p>
<p>In this blog, I am going to explore various ways to make Singletons in languages like Python, Java and Javascript so as to keep it simple, elegant and usable. Let’s talk about</p>
<img class=" img" width="100" height="100" src="/blog/2015/02/04/fun-with-singleton-python-javascript-and-java/python.png"></img>

<p>Python first. I love it, and it’s a really really wonderful language, and in here, there are n different ways to solve a problem. Singletons are no exception. The most natural way to do it is to create a decorator.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, klass)</span>:</span></div><div class="line">        self.klass = klass   <span class="comment"># class which is being decorated</span></div><div class="line">        self.instance = <span class="keyword">None</span>  <span class="comment"># instance of that class</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="comment"># new instance is created and stored for future use</span></div><div class="line">            self.instance = self.klass(*args, **kwargs)</div><div class="line">        <span class="keyword">return</span> self.instance</div></pre></td></tr></table></figure>

<p>Now, let’s say you have a Resource class. To make it singleton, you just need to decorate it with ‘@Singleton‘, and you are done.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="decorator">@Singleton</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, klass)</span>:</span></div><div class="line">        self.name = <span class="keyword">None</span></div></pre></td></tr></table></figure>

<p>Cool…eh? There are other – nerdy – ways too. Python uses an internal dictionary ‘<strong>dict</strong>’ variable to keep track of an Object’s properties and methods. So, if you can share ‘<strong>dict</strong>‘ across multiple instances of a Class, you can share the state between them. And isn’t that Singleton? Yes, that is. You might have many many instances, but all of them behave exactly the same.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></div><div class="line">    _shared = {}</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.__dict__ = Singleton._shared</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span><span class="params">(Singleton)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, klass)</span>:</span></div><div class="line">        self.name = <span class="keyword">None</span></div></pre></td></tr></table></figure>

<p>Since ‘self.<strong>dict</strong>‘ now refers to ‘_shared‘ dictionary, all instances of Resource would use the same dictionary and hence they will all have the same behavior. Geeky? Let me show you an even geekier way to do it.</p>
<p>In Python, when you instantiate a class, the interpreter calls ‘<strong>new</strong>‘ method – a class method which returns an instance of the class – and then ‘<strong>init</strong>‘ method – constructor of the class – is called which initializes the object. So, you can hack into ‘<strong>new</strong>‘ and return the single instance whenever it is being called.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></div><div class="line">    _instance = <span class="keyword">None</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">    <span class="comment"># cls is the Class and the rest are constructor arguments</span></div><div class="line">        <span class="keyword">if</span> cls._instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="comment"># create an instance and store it</span></div><div class="line">            cls._instance = Object.__new__(cls, *args, **kwargs)</div><div class="line">        <span class="keyword">return</span> cls._instance</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span><span class="params">(Singleton)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, klass)</span>:</span></div><div class="line">        self.name = <span class="keyword">None</span></div></pre></td></tr></table></figure>

<p>Aweomse! Isn’t it? There are other ways that deal with ‘<strong>metaclass</strong>‘ etc. but let’s save them for another day. Let’s use it now:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># get resource r1</span></div><div class="line">r1 = Resource();</div><div class="line"><span class="comment"># get resource r2  (since Resource is singleton, r1 == r2)</span></div><div class="line">r2 = Resource();</div><div class="line"><span class="comment"># to verify, let's set 'name' onto r1</span></div><div class="line">r1.name = <span class="string">"Animesh Kumar"</span></div><div class="line"><span class="keyword">print</span> r1.name</div><div class="line"><span class="comment"># and the same 'name' appears in r2 as well!</span></div><div class="line"><span class="keyword">print</span> r2.name</div></pre></td></tr></table></figure>

<img class=" img" width="100" height="100" src="/blog/2015/02/04/fun-with-singleton-python-javascript-and-java/javascript.png"></img>

<p>Let’s now see how do we do this in Javascript. For the most simple form, just define an Object Literal, and you are done.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> resource = {</div><div class="line">    getName : <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    },</div><div class="line">    setName: <span class="function"><span class="keyword">function</span><span class="params">(name)</span></span>{</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Easy. You have an object which you can now share across your application modules and it just works. For more complex scenarios, like private variables and all, you might have to resort to something like this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// self-executable wrapper function</span></div><div class="line"><span class="keyword">var</span> Resource = (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">    <span class="comment">// Resouce class which is to made 'singleton'</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_Resource</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">var</span> name; <span class="comment">// private variable</span></div><div class="line">        <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{ <span class="comment">// getter</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">        };</div><div class="line">        <span class="keyword">this</span>.setName= <span class="function"><span class="keyword">function</span><span class="params">(name)</span></span>{ <span class="comment">// setter</span></div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        };</div><div class="line">        <span class="comment">// do more stuffs</span></div><div class="line">    }</div><div class="line">    <span class="comment">// instance holder</span></div><div class="line">    <span class="keyword">var</span> instance = <span class="keyword">new</span> _Resource();<span class="xml"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span></div><div class="line">    // return an object with 'getInstance' method</div><div class="line">    return = {</div><div class="line">        getInstance: function(){</div><div class="line">            return instance;</div><div class="line">        }</div><div class="line">   };</div><div class="line">})();</div></pre></td></tr></table></figure>

<p>_Resource (line-04) is your function of interest, and you want to make it singleton. So, you create another function ‘Resource‘ which wraps over _Resource and returns an object with method ‘getInstance‘ which would return the same instance of _Resource every time it will be called.</p>
<p>Let’s try to use it now:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// get resource r1</span></div><div class="line">r1 = Resource.getInstance();</div><div class="line"><span class="comment">// get resource r2  (since Resource is singleton, r1 == r2)</span></div><div class="line">r2 = Resource.getInstance();</div><div class="line"><span class="comment">// to verify, let's set 'name' onto r1</span></div><div class="line">r1.setName(<span class="string">"Animesh Kumar"</span>);</div><div class="line"><span class="built_in">console</span>.log(r1.getName());</div><div class="line"><span class="comment">// and the same 'name' appears in r2 as well!</span></div><div class="line"><span class="built_in">console</span>.log(r2.getName());</div></pre></td></tr></table></figure>

<p>So it was easy. No? Great.</p>
<img class=" img" width="100" height="100" src="/blog/2015/02/04/fun-with-singleton-python-javascript-and-java/java.png"></img>


<p>Now, Java. I know every one of you would already know it. I would write about it anyway, just for the sake of completeness. In Java, you create a private static instance of the class, and use that instance wherever necessary.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resource</span> </span>{</div><div class="line">    <span class="comment">// static instance (Note: Resource instantiation is done here, not in getInstance)</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Resource instance = <span class="keyword">new</span> Resource();</div><div class="line">    <span class="comment">// property</span></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="comment">// private constructor to disable 'new'</span></div><div class="line">    <span class="keyword">private</span> <span class="title">Resource</span>() {</div><div class="line">    }</div><div class="line">    <span class="comment">// public staic method to get an instance of this class</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Resource <span class="title">getInstance</span>() {</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    }</div><div class="line">    <span class="comment">// getter</span></div><div class="line">    <span class="keyword">public</span> String <span class="title">getName</span>() {</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    }</div><div class="line">    <span class="comment">// setter</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span>(String name) {</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Now, let’s use it.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">    <span class="comment">// get resource r1</span></div><div class="line">    Resource r1 = Resource.getInstance();</div><div class="line">    <span class="comment">// get resource r2  (since Resource is singleton, r1 == r2)</span></div><div class="line">    Resource r2 = Resource.getInstance();</div><div class="line">    <span class="comment">// to verify, let's set 'name' onto r1</span></div><div class="line">    r1.setName(<span class="string">"Animesh Kumar"</span>);</div><div class="line">    System.out.println(r1.getName());</div><div class="line">    <span class="comment">// and the same 'name' appears in r2 as well!</span></div><div class="line">    System.out.println(r2.getName());</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Loud and clear. And this also stops you from instantiating ‘Resource‘ with ‘new‘ operator. Try this:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Resource r1 = <span class="keyword">new</span> Resource();  <span class="comment">// java.lang.Error: Unresolved compilation problem:</span></div></pre></td></tr></table></figure>

<p>Your code will not compile. I know you know why. I will write anyways: because the constructor is private! So, there is no way to get an instance of Resource class but through ‘getInstance’ method which ensures single instance of the class. Also, If you noticed: I have instantiated ‘instance’ during declaration itself, not in ‘getInstance’ method. This way, the object gets created at the time of class loading, and you save yourself from a lot of issues that creeps in because of Java Just in Time.</p>
]]></content:encoded>
      <comments>http://47billion.com/blog/2015/02/04/fun-with-singleton-python-javascript-and-java/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Jesque-Guice binding]]></title>
      <link>http://47billion.com/blog/2013/09/18/jesque-guice-binding/</link>
      <guid>http://47billion.com/blog/2013/09/18/jesque-guice-binding/</guid>
      <pubDate>Wed, 18 Sep 2013 11:14:41 GMT</pubDate>
      <description>
      <![CDATA[<p>In our Java stack, we use <a href="https://code.google.com/p/google-guice/" target="_blank" rel="external">Guice</a> IOC library quite he]]>
      </description>
      <content:encoded><![CDATA[<p>In our Java stack, we use <a href="https://code.google.com/p/google-guice/" target="_blank" rel="external">Guice</a> IOC library quite heavily. We are kind of smitten with it. Now, when we needed a task queue to process our background jobs, we settled with <a href="https://github.com/gresrun/jesque" target="_blank" rel="external">Jesque</a> which is a port of Github’s Resque project, and runs on Redis which was already part of our stack. In the process, we also added <a href="http://anismiles.wordpress.com/2013/09/02/delayed-jobs-with-jesque/" target="_blank" rel="external">delayed task functionality</a> to this. </p>
<h2 id="Problem">Problem</h2>
<p>Anyways, the problem we were facing was with Injecting Guice dependencies into Jesque workers. Our workers performed heavy operations and at times had to read-write from DB, or speak with other services. </p>
<p>Jesque uses Java reflection APIs to instantiate and run its workers (which are Runnable classes) and so, it becomes very difficult to inject Guice managed objects and services into Jesque workers. </p>
<p>We started the hacky-and-ugly way by creating static references to relevant services that our workers needed. if it were for few services, this would have worked, but our workers kept growing in features and reach, and after a while the whole code base was stinking. We had to do something about it. Something elegant!  </p>
<h2 id="Solution">Solution</h2>
<p>So, we created Jesque Guice binding project. You can annotate your worker classes, and Guice will then discover, register and start them. Let me show you some code.</p>
<p>First, let’s create an ExampleWorker. You have to remember that the Worker must <u>implement Runnable</u> interface, and it must be annotated with <u>@Worker</u> which Guice uses for discovery and binding. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ExampleWorker</span></div><div class="line"></div><div class="line"><span class="annotation">@Worker</span>(job = &quot;ExampleJob&quot;,                 <span class="comment">// job name</span></div><div class="line">        queues = { &quot;EXP_QUEUE&quot; },           <span class="comment">// queue names</span></div><div class="line">        enabled = <span class="keyword">true</span>,                     <span class="comment">// enabled</span></div><div class="line">        count = <span class="number">1</span>,                          <span class="comment">// 1 instance of this worker running</span></div><div class="line">        events = { WorkerEvent.JOB_SUCCESS, WorkerEvent.WORKER_START }, <span class="comment">// Events to listen to</span></div><div class="line">        listener = EchoListener.class      <span class="comment">// WorkerEventListener</span></div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</div><div class="line">    <span class="comment">// LOG</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(ExampleWorker.class);</div><div class="line"></div><div class="line">    <span class="comment">// Note: Only field level injection would work!</span></div><div class="line">    <span class="annotation">@Inject</span></div><div class="line">    ExampleService service;</div><div class="line"></div><div class="line">    String arg1;</div><div class="line">    String arg2;</div><div class="line"></div><div class="line">    <span class="comment">// Must keep an empty constructor for Guice to discover this</span></div><div class="line">    <span class="keyword">public</span> <span class="title">ExampleWorker</span>() {</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">ExampleWorker</span>(String arg1, String arg2) {</div><div class="line">        <span class="keyword">this</span>.arg1 = arg1;</div><div class="line">        <span class="keyword">this</span>.arg2 = arg2;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">        LOG.info(&quot;Running worker={}, with arg1={}, arg2={}&quot;, <span class="keyword">new</span> Object[] { getClass(), arg1, arg2 });</div><div class="line">        <span class="comment">// calling service</span></div><div class="line">        service.serve();</div><div class="line">    }</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong><u>@Worker</u></strong> attributes let you control the behavior. The above worker, ExampleWorker, listens to <strong><u>EXP_QUEUE</u></strong> queue, accepts Jobs by name <strong><u>ExampleJob</u></strong>, has an WorkerEventListener defined by Guice Managed class <strong><u>EchoListener</u></strong> which listens to WorkerEvent <strong>JOB_SUCCESS</strong> and <strong>WORKER_START</strong>. There is only <strong>ONE</strong> instance of this worker running. </p>
<p>Note: ExampleWorker has been <u>field @Injected</u> with <strong>ExampleService</strong>. Please remember, that </p>
<ul>
<li><u>Only field @Inject</u> will work with Workers, because Jesque uses constructors to pass Job arguments. </li>
<li>Also, you <u>must keep an empty constructor</u> around so as to let Guice discover this worker. </li>
</ul>
<p>Now, since we have added a Listener, we must define it. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// EchoListener</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoListener</span> <span class="keyword">implements</span> <span class="title">WorkerListener</span> </span>{</div><div class="line">    <span class="comment">// LOG</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(EchoListener.class);</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span>(WorkerEvent event, Worker worker, String queue, Job job, Object runner,</div><div class="line">            Object result, Exception ex) {</div><div class="line">        LOG.info(&quot;onEvent ==&gt;&gt; queue={}, event={}&quot;, <span class="keyword">new</span> Object[] { queue, event });</div><div class="line">    }</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p>For the sake of demonstration, this has been kept very minimal. But, mind you, you can @Inject any Guice managed objects into this, using <u>constructor and/or field injection</u>.  </p>
<p>Now, let’s define the ExampleService that we want to @Inject into our worker. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ExampleService</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleService</span> </span>{</div><div class="line">    <span class="javadoc">/** The Constant LOG. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(ExampleService.class);</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serve</span>() {</div><div class="line">        LOG.info(&quot;Heya! I am not here to serve, just to show you how injection works.&quot;);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Wonderful! Let’s now bind these all together in a GuiceModule. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ExampleModule</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleModule</span> <span class="keyword">extends</span> <span class="title">AbstractModule</span> </span>{</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span>() {</div><div class="line">        <span class="comment">// Jesque Guice</span></div><div class="line">        install(<span class="keyword">new</span> JesqueModule());</div><div class="line"></div><div class="line">        <span class="comment">// Jesque Client</span></div><div class="line">        Config config = <span class="keyword">new</span> ConfigBuilder().withHost(&quot;localhost&quot;).withPort(<span class="number">6379</span>).withDatabase(<span class="number">0</span>).build();</div><div class="line">        bind(Config.class).toInstance(config);</div><div class="line">        bind(Client.class).toInstance(<span class="keyword">new</span> ClientImpl(config));</div><div class="line"></div><div class="line">        <span class="comment">// Worker</span></div><div class="line">        bind(ExampleWorker.class).asEagerSingleton(); <span class="comment">// Must be singleton</span></div><div class="line">        <span class="comment">// WorkerEventListener</span></div><div class="line">        bind(EchoListener.class).in(Scopes.SINGLETON);</div><div class="line">        <span class="comment">// Worker Executor (This is where they actually run)</span></div><div class="line">        bind(WorkerExecutor.class).to(SimpleThreadBasedWorkerExecutor.class);</div><div class="line">        <span class="comment">// Service (will be injected into workers)</span></div><div class="line">        bind(ExampleService.class).asEagerSingleton();</div><div class="line">    }</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p>Here, first we install JesqueModule, and then bind other objects. </p>
<ul>
<li>Bind Jesque config and client.</li>
<li>Bind Worker, Lister, Service etc. </li>
</ul>
<p>You will notice we have also bound <u>WorkerExecutor</u>. This interface accepts <strong><u>net.greghaines.jesque.worker.Worker</u></strong> instance and runs that on a thread. Jesque-Guice comes with 2 simple implementations:</p>
<p>1. <u>SimpleThreadBasedWorkerExecutor</u> which run each net.greghaines.jesque.worker.Worker on an unmanaged separate thread, and<br>2. <u>CachedThreadPoolBasedWorkerExecutor</u> which creates a CachedThreadPool where net.greghaines.jesque.worker.Worker is run. </p>
<p>You can implement your own strategy or provide your own ExecutorService. </p>
<h2 id="Run">Run</h2>
<p>Now we have everything, let’s run it then. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Main</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</div><div class="line">    <span class="javadoc">/** The Constant LOG. */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(Main.class);</div><div class="line"></div><div class="line">    <span class="javadoc">/**</span></div><div class="line">     *<span class="javadoctag"> @param</span> args</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">        Injector injector = Guice.createInjector(Stage.DEVELOPMENT, <span class="keyword">new</span> Module[] { <span class="keyword">new</span> ExampleModule() });</div><div class="line"></div><div class="line">        <span class="comment">// Get Jesque client</span></div><div class="line">        Client client = (Client) injector.getInstance(Client.class);</div><div class="line">        LOG.info(&quot;Publish jobs&quot;);</div><div class="line">        <span class="comment">// Push jobs</span></div><div class="line">        client.enqueue(&quot;EXP_QUEUE&quot;, <span class="keyword">new</span> Job(&quot;ExampleJob&quot;, &quot;hello&quot;, &quot;job1&quot;));</div><div class="line">        client.enqueue(&quot;EXP_QUEUE&quot;, <span class="keyword">new</span> Job(&quot;ExampleJob&quot;, &quot;hello&quot;, &quot;job2&quot;));</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>You should see,</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// Job - <span class="number">1</span></div><div class="line">DEBUG c.s.commons.jesque.GuiceAwareWorker - Injecting dependencies into worker instance = com.strumsoft.commons.jesque.example.ExampleWorker@<span class="number">6</span>b754699</div><div class="line">DEBUG c.s.commons.jesque.GuiceAwareWorker - Delegating to run worker instance = com.strumsoft.commons.jesque.example.ExampleWorker@<span class="number">6</span>b754699</div><div class="line">INFO  c.s.c.jesque.example.ExampleWorker - Running worker=class com.strumsoft.commons.jesque.example.ExampleWorker, with arg1=hello, arg2=job1</div><div class="line">INFO  c.s.c.jesque.example.ExampleService - Heya! I am not here to serve, just to show you how injection works.</div><div class="line">INFO  c.s.c.jesque.example.EchoListener - onEvent ==&gt;&gt; queue=EXP_QUEUE, event=JOB_SUCCESS</div><div class="line"></div><div class="line">// Job -<span class="number">2</span></div><div class="line">DEBUG c.s.commons.jesque.GuiceAwareWorker - Injecting dependencies into worker instance = com.strumsoft.commons.jesque.example.ExampleWorker@<span class="number">6602</span>e323</div><div class="line">DEBUG c.s.commons.jesque.GuiceAwareWorker - Delegating to run worker instance = com.strumsoft.commons.jesque.example.ExampleWorker@<span class="number">6602</span>e323</div><div class="line">INFO  c.s.c.jesque.example.ExampleWorker - Running worker=class com.strumsoft.commons.jesque.example.ExampleWorker, with arg1=hello, arg2=job2</div><div class="line">INFO  c.s.c.jesque.example.ExampleService - Heya! I am not here to serve, just to show you how injection works.</div><div class="line">INFO  c.s.c.jesque.example.EchoListener - onEvent ==&gt;&gt; queue=EXP_QUEUE, event=JOB_SUCCESS</div></pre></td></tr></table></figure>

<p>Works… eh? :)</p>
<p>You can grab the project source at github <a href="https://github.com/anismiles/jesque-guice/" target="_blank" rel="external">https://github.com/anismiles/jesque-guice</a> Give it a try. I hope this will help some of you folks. Share your thoughts with me. </p>
<p>Happy hacking!</p>
]]></content:encoded>
      <comments>http://47billion.com/blog/2013/09/18/jesque-guice-binding/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Delayed Jobs with Jesque]]></title>
      <link>http://47billion.com/blog/2013/09/02/delayed-jobs-with-jesque/</link>
      <guid>http://47billion.com/blog/2013/09/02/delayed-jobs-with-jesque/</guid>
      <pubDate>Mon, 02 Sep 2013 11:36:43 GMT</pubDate>
      <description>
      <![CDATA[<p><a href="https://github.com/gresrun/jesque" title="Jesque" target="_blank" rel="external">Jesque</a> is an interesting project. It’s a Ja]]>
      </description>
      <content:encoded><![CDATA[<p><a href="https://github.com/gresrun/jesque" title="Jesque" target="_blank" rel="external">Jesque</a> is an interesting project. It’s a Java port of <a href="https://github.com/resque/resque" title="Resque" target="_blank" rel="external">Github’s Resque</a> task queue library. Works on top of Redis. It is fast. It eats less. And doesn’t need a lot of maintenance, as long long your Redis is okay, you are okay! We have been happily using this in production for a while.</p>
<h2 id="Problem">Problem</h2>
<p>And then, we encountered a need for delayed jobs. We needed an ability to execute jobs in future with deterministic delay. We had 2 options:</p>
<p>1. Either, schedule these delayed jobs in <a href="http://quartz-scheduler.org/" title="Quartz" target="_blank" rel="external">Quartz</a> - that was okay because we already had been using Quartz - and then, once Quartz jobs get fired, they publish a Task into Jesque, and let the workers handle the rest. (<span style="text-decoration:underline;">This was too contrived to implement, and would have become maintenance/reporting nightmare!</span>)</p>
<p>2. We extend Jesque to support delayed jobs inherently.</p>
<h2 id="Solution">Solution</h2>
<p>We decided to go with option-2, and started exploring Redis datasets. Turned out, <a href="http://redis.io/commands#sorted_set" target="_blank" rel="external">ZSET</a> was all that we needed.</p>
<p>Jesque uses Redis <a href="http://redis.io/commands#list" target="_blank" rel="external">LIST</a> for job storage, workers keep polling the list, and <a href="http://redis.io/commands/lpop" target="_blank" rel="external">LPOP</a>s tasks from the LIST.</p>
<p>This is what we ended up doing:</p>
<p>When <u>adding a delayed job</u>,</p>
<p>1. Calculate future timestamp when the job should run,<br>2. Use that timestamp as SCORE to ZSET entry.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">long</span> delay = <span class="number">10</span>; <span class="comment">//sec</span></div><div class="line"><span class="keyword">final</span> <span class="keyword">long</span> future = System.currentTimeMillis() + (delay * <span class="number">1000</span>); <span class="comment">// future</span></div><div class="line">jedis.zadd(QUEUE, future, jobInfo); </div><div class="line"></div><div class="line"><span class="comment">// Redis</span></div><div class="line"><span class="comment">// ZADD &lt;queue&gt; &lt;future&gt; &lt;job-information&gt;</span></div></pre></td></tr></table></figure>

<p>On the other hand, <u>Workers’ poll logic was updated</u>. For Delayed queues, </p>
<p>1. Check if there are any items with SCORE between -INF and now,</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">long</span> now = System.currentTimeMillis();</div><div class="line"><span class="keyword">final</span> Set&lt;String&gt; tasks = jedis.zrangeByScore(QUEUE, -<span class="number">1</span>, now, <span class="number">0</span>, <span class="number">1</span>);</div></pre></td></tr></table></figure>

<p>If tasks are non-empty, try to grab one to execute. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != tasks &amp;&amp; !tasks.isEmpty()) {</div><div class="line">    String task = tasks.iterator().next();</div><div class="line">    <span class="comment">// try to acquire this task</span></div><div class="line">    <span class="keyword">if</span> (jedis.zrem(QUEUE, task) == <span class="number">1</span>) {</div><div class="line">         <span class="keyword">return</span> task; <span class="comment">// Return</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>This way, we ensure that no 2 workers would grab the same task to execute. </p>
<p>Also, an important point to note here is that - You <u><strong>don’t have to change your existing workers</strong></u> or redo new workers in any way. Just bind them to a Delayed Queue, and start publishing delayed tasks. </p>
<h2 id="Example">Example</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// DelayedJobTest.java</span></div><div class="line"><span class="keyword">package</span> net.greghaines.jesque;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> net.greghaines.jesque.utils.JesqueUtils.entry;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> net.greghaines.jesque.utils.JesqueUtils.map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="keyword">import</span> net.greghaines.jesque.client.Client;</div><div class="line"><span class="keyword">import</span> net.greghaines.jesque.client.ClientPoolImpl;</div><div class="line"><span class="keyword">import</span> net.greghaines.jesque.worker.Worker;</div><div class="line"><span class="keyword">import</span> net.greghaines.jesque.worker.WorkerImpl;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayedJobTest</span> </span>{</div><div class="line"></div><div class="line">    <span class="annotation">@SuppressWarnings</span>(&quot;unchecked&quot;)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> InterruptedException {</div><div class="line">        <span class="comment">// Queue name</span></div><div class="line">        <span class="keyword">final</span> String QUEUE = &quot;fooDelayed&quot;;</div><div class="line"></div><div class="line">        <span class="comment">// Config</span></div><div class="line">        <span class="keyword">final</span> Config config = <span class="keyword">new</span> ConfigBuilder().withHost(&quot;localhost&quot;).withPort(<span class="number">6379</span>).withDatabase(<span class="number">0</span>).build();</div><div class="line"></div><div class="line">        <span class="comment">// Client</span></div><div class="line">        <span class="keyword">final</span> Client client = <span class="keyword">new</span> ClientPoolImpl(config, <span class="keyword">new</span> JedisPool(&quot;localhost&quot;));</div><div class="line">        <span class="keyword">long</span> delay = <span class="number">10</span>; <span class="comment">// seconds</span></div><div class="line">        <span class="keyword">long</span> future = System.currentTimeMillis() + (delay * <span class="number">1000</span>); <span class="comment">// Future timestamp</span></div><div class="line"></div><div class="line">        <span class="comment">// Enqueue job</span></div><div class="line">        client.delayedEnqueue(QUEUE, </div><div class="line">                <span class="keyword">new</span> Job(</div><div class="line">                        TestJob.class.getSimpleName(), </div><div class="line">                        <span class="keyword">new</span> Object[] {&quot;HELLO&quot;, &quot;WORLD&quot; } <span class="comment">// arguments</span></div><div class="line">                ), </div><div class="line">                future);</div><div class="line">        <span class="comment">// End</span></div><div class="line">        client.end();</div><div class="line"></div><div class="line">        <span class="comment">// Worker</span></div><div class="line">        <span class="keyword">final</span> Worker worker = <span class="keyword">new</span> WorkerImpl(config, Arrays.asList(QUEUE), map(entry(TestJob.class.getSimpleName(), TestJob.class)));</div><div class="line">        <span class="keyword">final</span> Thread workerThread = <span class="keyword">new</span> Thread(worker);</div><div class="line">        workerThread.start(); <span class="comment">// start</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>And, this is the TestJob,</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// TestJob.java</span></div><div class="line"><span class="keyword">package</span> net.greghaines.jesque;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJob</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</div><div class="line">    <span class="keyword">final</span> String arg1;</div><div class="line">    <span class="keyword">final</span> String arg2;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="title">TestJob</span>(String arg1, String arg2) {</div><div class="line">        <span class="keyword">this</span>.arg1 = arg1;</div><div class="line">        <span class="keyword">this</span>.arg2 = arg2;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="annotation">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">        System.out.println(&quot;Job ran at=&quot; + <span class="keyword">new</span> Date() + &quot;, with arg1=&quot; + arg1 + &quot; and arg2=&quot; + arg2);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>We have using this solution in production for quite sometime, and this has been pretty stable. </p>
<p>BTW, you can grab the source here: <a href="https://github.com/anismiles/jesque" target="_blank" rel="external">https://github.com/anismiles/jesque</a> and give it a try yourself. </p>
<p>Happy Hacking!</p>
]]></content:encoded>
      <comments>http://47billion.com/blog/2013/09/02/delayed-jobs-with-jesque/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Jetty Executable Webserver Archetype]]></title>
      <link>http://47billion.com/blog/2013/01/08/jetty-executable-webserver-archetype/</link>
      <guid>http://47billion.com/blog/2013/01/08/jetty-executable-webserver-archetype/</guid>
      <pubDate>Tue, 08 Jan 2013 08:18:49 GMT</pubDate>
      <description>
      <![CDATA[<p>We create and deploy many rest based API apps on our servers. Now, instead of managing multitudes of webservers on different machines, we]]>
      </description>
      <content:encoded><![CDATA[<p>We create and deploy many rest based API apps on our servers. Now, instead of managing multitudes of webservers on different machines, we make our deployable archives wrapped with all the necessary dependencies in order to be self-executable. Benefits?</p>
<ul>
<li>We just have to ensure that all our servers have the same Java environment, and no other dependencies.</li>
<li>No waste of time configuring, managing web (tomcat, jetty etc.) servers.</li>
<li>And, we only have to distribute a single executable.<br>Hassle free management. Won’t you agree?</li>
</ul>
<p>To cut down on bootstrapping time, we have created a <a href="http://maven.apache.org/guides/introduction/introduction-to-archetypes.html" target="_blank" rel="external">maven archetype</a> to help us quickly create and start on new API projects. Our tech stack is <a href="http://code.google.com/p/google-guice/" target="_blank" rel="external">Google Guice</a>, <a href="http://www.jboss.org/resteasy" target="_blank" rel="external">JBoss Resteasy</a>, <a href="http://logback.qos.ch/" target="_blank" rel="external">Logback</a>, and <a href="http://www.eclipse.org/jetty/" target="_blank" rel="external">Embedded Jetty</a>.</p>
<p>Github link: <a href="https://github.com/anismiles/jetty-webserver-archetype" target="_blank" rel="external">https://github.com/anismiles/jetty-webserver-archetype</a></p>
<h2 id="Install">Install</h2>
<p>You can either build/install from source</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone https:<span class="comment">//github.com/anismiles/jetty-webserver-archetype.git</span></div><div class="line">mvn clean install</div></pre></td></tr></table></figure>

<p>Or you can simply <a href="https://github.com/anismiles/jetty-webserver-archetype/blob/master/downloads/jetty-webserver-archetype-1.0.jar?raw=true" target="_blank" rel="external">download the jar</a> and install that.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mvn install:install-file \</div><div class="line">-Dfile=jetty-webserver-archetype-<span class="number">1.0</span>.jar \</div><div class="line">-DgroupId=com.strumsoft \</div><div class="line">-DartifactId=jetty-webserver-archetype \</div><div class="line">-Dversion=<span class="number">1.0</span> \</div><div class="line">-Dpackaging=jar \</div><div class="line">-DgeneratePom=<span class="keyword">true</span></div></pre></td></tr></table></figure>

<h2 id="Usage">Usage</h2>
<p>Let’s say you want to create a new project “<strong>hello-world</strong>” with group “<strong>com.hello.world</strong>”, you would run:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mvn archetype:generate \</div><div class="line">-DgroupId=com.hello.world \</div><div class="line">-DartifactId=hello-world \</div><div class="line">-Dversion=<span class="number">1.0</span>-SNAPSHOT \</div><div class="line">-DarchetypeGroupId=com.strumsoft \</div><div class="line">-DarchetypeVersion=<span class="number">1.0</span> \</div><div class="line">-DarchetypeArtifactId=jetty-webserver-archetype</div></pre></td></tr></table></figure>

<p>That’s it. You are ready to roll. You have set up a basic working API app. Now, you can run it in dev mode</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean jetty:run</div></pre></td></tr></table></figure>

<p>Or in production mode</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mvn clean <span class="keyword">package</span></div><div class="line">java –jar target/hello-world-<span class="number">1.0</span>-SNAPSHOT-dist.war start &amp;</div></pre></td></tr></table></figure>

<p>To check, open <a href="http://localhost:8085/" target="_blank" rel="external">http://localhost:8085/</a><br>To stop:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java –jar target/hello-world-<span class="number">1.0</span>-SNAPSHOT-dist.war stop</div></pre></td></tr></table></figure>

<p>Further, you can pass additional Jetty, Logback or your App’s properties</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">java \</div><div class="line">-Djetty.configurationFile=&lt;jetty-config&gt; \</div><div class="line">-Dapp.configurationFile=&lt;app.properties&gt; \</div><div class="line">-Dlogback.configurationFile=&lt;logback.xml&gt; \</div><div class="line">–jar target/hello-world-<span class="number">1.0</span>-SNAPSHOT-dist.war start &amp;</div></pre></td></tr></table></figure>

<p>They will override default properties setup by the executable.<br>Ideally you might want to create an <a href="http://www.ghacks.net/2009/04/04/get-to-know-linux-the-etcinitd-directory/" target="_blank" rel="external">init.d</a> file to start and stop you API app efficiently. Here is a prototype:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="shebang">#!/bin/sh</span></div><div class="line"></div><div class="line"><span class="comment"># Executable war file</span></div><div class="line">WAR_FILE=/var/apps/&lt;my-war-file&gt;.war</div><div class="line"></div><div class="line"><span class="comment"># Configuration files</span></div><div class="line">APP_NAME=&lt;app-name&gt;</div><div class="line"></div><div class="line">JETTY_CONFIG=/etc/<span class="variable">${APP_NAME}</span>-jetty.properties</div><div class="line">APP_CONFIG=/etc/<span class="variable">${APP_NAME}</span>-app.properties</div><div class="line">LOGBACK_CONFIG=/etc/<span class="variable">${APP_NAME}</span>-logback.properties</div><div class="line"></div><div class="line"><span class="comment"># Process</span></div><div class="line">PIDFILE=/var/run/<span class="variable">${APP_NAME}</span>.pid</div><div class="line"></div><div class="line"><span class="comment"># Java arguments</span></div><div class="line">JAVA_ARGS=&quot;-Djetty.configurationFile=<span class="variable">${JETTY_CONFIG}</span> -Dapp.configurationFile=<span class="variable">${APP_CONFIG}</span> -Dlogback.configurationFile=<span class="variable">${LOGBACK_CONFIG}</span>&quot;</div><div class="line"></div><div class="line"><span class="comment"># Command</span></div><div class="line">CMD=<span class="variable">$1</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [[ -z <span class="variable">${CMD}</span> ]]; <span class="keyword">then</span></div><div class="line">  java <span class="variable">${JAVA_ARGS}</span> -jar <span class="variable">${WAR_FILE}</span> usage</div><div class="line">  <span class="keyword">exit</span> <span class="number">1</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [[ <span class="variable">${CMD}</span> == <span class="string">'start'</span> ]]; <span class="keyword">then</span></div><div class="line">    <span class="keyword">if</span> [[ <span class="operator">-f</span> <span class="variable">${PIDFILE}</span> ]]; <span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> &quot;Already running&quot;</div><div class="line">        <span class="keyword">exit</span> <span class="number">1</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> [[ <span class="operator">-f</span> <span class="variable">${WAR_FILE}</span> ]]; <span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> &quot;Starting jetty: <span class="variable">${WAR_FILE}</span>&quot;</div><div class="line">        java <span class="variable">${JAVA_ARGS}</span> -jar <span class="variable">${WAR_FILE}</span> start &amp;</div><div class="line">        PID=$!</div><div class="line">        <span class="built_in">echo</span> &quot;<span class="variable">$PID</span>&quot; &gt; <span class="variable">${PIDFILE}</span></div><div class="line">        <span class="built_in">echo</span> &quot;Started <span class="variable">${APP_NAME}</span> with pid: <span class="variable">${PID}</span>&quot;</div><div class="line">    <span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">elif</span> [[ <span class="variable">${CMD}</span> == <span class="string">'stop'</span> ]]; <span class="keyword">then</span></div><div class="line">    <span class="comment"># Try gracefully first</span></div><div class="line">    java <span class="variable">${JAVA_ARGS}</span> -jar <span class="variable">${WAR_FILE}</span> stop</div><div class="line">    sleep <span class="number">10</span></div><div class="line">    <span class="keyword">if</span> [[ <span class="operator">-f</span> <span class="variable">${PIDFILE}</span> ]]; <span class="keyword">then</span></div><div class="line">        PID=`cat <span class="variable">${PIDFILE}</span>`</div><div class="line">        test -z <span class="variable">$PID</span> || kill <span class="variable">$PID</span></div><div class="line">        rm <span class="variable">${PIDFILE}</span></div><div class="line">        sleep <span class="number">1</span></div><div class="line">        <span class="built_in">echo</span> &quot;Forcibly Stopped <span class="variable">${WAR_FILE}</span> with pid: <span class="variable">${PID}</span>&quot;</div><div class="line">    <span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">else</span> <span class="comment"># Just let the other cmds through...</span></div><div class="line">    java <span class="variable">${JAVA_ARGS}</span> -jar <span class="variable">${WAR_FILE}</span> <span class="variable">${CMD}</span></div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">exit</span> <span class="number">0</span></div></pre></td></tr></table></figure>

<p>That’s it! have fun. :)</p>
]]></content:encoded>
      <comments>http://47billion.com/blog/2013/01/08/jetty-executable-webserver-archetype/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Securing, Versioning and Auditing REST (JAX-RS, Jersey) APIs]]></title>
      <link>http://47billion.com/blog/2012/03/02/securing-versioning-and-auditing-rest-jax-rs-jersey-apis/</link>
      <guid>http://47billion.com/blog/2012/03/02/securing-versioning-and-auditing-rest-jax-rs-jersey-apis/</guid>
      <pubDate>Fri, 02 Mar 2012 13:49:33 GMT</pubDate>
      <description>
      <![CDATA[<p>Now that your functionalities are working, you want a layer of security to authenticate/authorize your APIs. Though this is a bad approac]]>
      </description>
      <content:encoded><![CDATA[<p>Now that your functionalities are working, you want a layer of security to authenticate/authorize your APIs. Though this is a bad approach towards security, but – I know – real life is a tough game and nothing happens they way they should be… and so be it. Additionally, you might want to control API versions (i.e. expose newer APIs only to newer clients) and audit API usage.</p>
<p>Well, I am going to propose a <em>tangential</em> way to implement these concerns. You won’t need to touch any of your business logic as such. Only few annotations (custom and otherwise) would need to be applied. That way, you won’t feel bad about missing these things when you started the project and your concerns will be taken care of in the most un-obtrusive way possible. Wonderful… eh?</p>
<p>First, you will need to create some sort of <strong>sign-in</strong> API, which will accept username/password (or oAuth or whatever you fancy) and generate some sort of session information which you will store in some database (<a href="http://redis.io/" target="_blank" rel="external">Redis</a> maybe!) and share its ID, say <em>sessionId</em>, with client. Then, with every subsequent request, Client will attach this sessionId in the request header which server will pick and look up for associated session information (permission, roles etc.) and based upon that server will authenticate and authorize the request. </p>
<p>Here is your Session bean.  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.strumsoft.api;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="javadoc">/**</span></div><div class="line"> *<span class="javadoctag"> @author</span> &quot;Animesh Kumar &lt;animesh@strumsoft.com&gt;&quot;</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Session</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</div><div class="line">	<span class="comment">// </span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7483170872690892182</span>L;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String sessionId;   <span class="comment">// id</span></div><div class="line">	<span class="keyword">private</span> String userId;      <span class="comment">// user</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> active;     <span class="comment">// session active?</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> secure;     <span class="comment">// session secure?</span></div><div class="line"></div><div class="line">	<span class="keyword">private</span> Date createTime;    <span class="comment">// session create time</span></div><div class="line">	<span class="keyword">private</span> Date lastAccessedTime;  <span class="comment">// session last use time</span></div><div class="line"></div><div class="line">	<span class="comment">// getters/setters here</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>And this is your User bean. This must implement <a href="http://docs.oracle.com/javase/6/docs/api/java/security/Principal.html" target="_blank" rel="external">java.security.Principal</a>. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> com.strumsoft.api;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="javadoc">/**</span></div><div class="line"> *<span class="javadoctag"> @author</span> &quot;Animesh Kumar &lt;animesh@strumsoft.com&gt;&quot;</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">security</span>.<span class="title">Principal</span> </span>{</div><div class="line">	<span class="comment">// Role</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">enum</span> Role {</div><div class="line">		Editor, Visitor, Contributor</div><div class="line">	};</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String userId;          <span class="comment">// id</span></div><div class="line">	<span class="keyword">private</span> String name;            <span class="comment">// name</span></div><div class="line">	<span class="keyword">private</span> String emailAddress;    <span class="comment">// email</span></div><div class="line">	<span class="keyword">private</span> Set&lt;Role&gt; roles;        <span class="comment">// roles</span></div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> String <span class="title">getName</span>() {</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// getters/setters here</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>Now, you need to implement <a href="http://jackson.codehaus.org/javadoc/jax-rs/1.0/javax/ws/rs/core/SecurityContext.html" target="_blank" rel="external">javax.ws.rs.core.SecurityContext</a>. This will be bound to incoming request and will decide whether to allow or deny it.  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.strumsoft.api;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.security.Principal;</div><div class="line"><span class="keyword">import</span> javax.ws.rs.WebApplicationException;</div><div class="line"><span class="keyword">import</span> javax.ws.rs.core.Response;</div><div class="line"><span class="keyword">import</span> javax.ws.rs.core.SecurityContext;</div><div class="line"></div><div class="line"><span class="javadoc">/**</span></div><div class="line"> *<span class="javadoctag"> @author</span> &quot;Animesh Kumar &lt;animesh@strumsoft.com&gt;&quot;</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySecurityContext</span> <span class="keyword">implements</span> <span class="title">javax</span>.<span class="title">ws</span>.<span class="title">rs</span>.<span class="title">core</span>.<span class="title">SecurityContext</span> </span>{</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> User user;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Session session;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="title">MySecurityContext</span>(Session session, User user) {</div><div class="line">		<span class="keyword">this</span>.session = session;</div><div class="line">		<span class="keyword">this</span>.user = user;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> String <span class="title">getAuthenticationScheme</span>() {</div><div class="line">		<span class="keyword">return</span> SecurityContext.BASIC_AUTH;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> Principal <span class="title">getUserPrincipal</span>() {</div><div class="line">		<span class="keyword">return</span> user;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSecure</span>() {</div><div class="line">		<span class="keyword">return</span> (<span class="keyword">null</span> != session) ? session.isSecure() : <span class="keyword">false</span>;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUserInRole</span>(String role) {</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> == session || !session.isActive()) {</div><div class="line">			<span class="comment">// Forbidden</span></div><div class="line">			Response denied = Response.status(Response.Status.FORBIDDEN).entity(&quot;Permission Denied&quot;).build();</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> WebApplicationException(denied);</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">try</span> {</div><div class="line">			<span class="comment">// this user has this role?</span></div><div class="line">			<span class="keyword">return</span> user.getRoles().contains(User.Role.valueOf(role));</div><div class="line">		} <span class="keyword">catch</span> (Exception e) {</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Then, you need a <a href="http://jersey.java.net/nonav/apidocs/latest/jersey/com/sun/jersey/spi/container/ResourceFilter.html" target="_blank" rel="external">ResourceFilter</a> which will intercept the request, look for sessionId in the header and generate and attach our SecurityContext implementation to it. Notice, how our implementation only gets applied on Request but not on Response. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.strumsoft.api;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.ws.rs.ext.Provider;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.flockthere.api.repository.SessionRepository;</div><div class="line"><span class="keyword">import</span> com.flockthere.api.repository.UserRepository;</div><div class="line"><span class="keyword">import</span> com.sun.jersey.spi.container.ContainerRequest;</div><div class="line"><span class="keyword">import</span> com.sun.jersey.spi.container.ContainerRequestFilter;</div><div class="line"><span class="keyword">import</span> com.sun.jersey.spi.container.ContainerResponseFilter;</div><div class="line"><span class="keyword">import</span> com.sun.jersey.spi.container.ResourceFilter;</div><div class="line"></div><div class="line"><span class="javadoc">/**</span></div><div class="line"> * Filter all incoming requests, look for possible session information and use that</div><div class="line"> * to create and load a SecurityContext to request. </div><div class="line"> *<span class="javadoctag"> @author</span> &quot;Animesh Kumar &lt;animesh@strumsoft.com&gt;&quot;</div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="annotation">@Component</span>   <span class="comment">// let spring manage the lifecycle</span></div><div class="line"><span class="annotation">@Provider</span>    <span class="comment">// register as jersey's provider</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityContextFilter</span> <span class="keyword">implements</span> <span class="title">ResourceFilter</span>, <span class="title">ContainerRequestFilter</span> </span>{</div><div class="line"></div><div class="line">	<span class="annotation">@Autowired</span></div><div class="line">	<span class="keyword">private</span> SessionRepository sessionRepository;  <span class="comment">// DAO to access Session</span></div><div class="line"></div><div class="line">	<span class="annotation">@Autowired</span></div><div class="line">	<span class="keyword">private</span> UserRepository userRepository;  <span class="comment">// DAO to access User</span></div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> ContainerRequest <span class="title">filter</span>(ContainerRequest request) {</div><div class="line">		<span class="comment">// Get session id from request header</span></div><div class="line">		<span class="keyword">final</span> String sessionId = request.getHeaderValue(&quot;session-id&quot;);</div><div class="line"></div><div class="line">		User user = <span class="keyword">null</span>;</div><div class="line">		Session session = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (sessionId != <span class="keyword">null</span> &amp;&amp; sessionId.length() &gt; <span class="number">0</span>) {</div><div class="line">			<span class="comment">// Load session object from repository</span></div><div class="line">			session = sessionRepository.findOne(sessionId);</div><div class="line"></div><div class="line">			<span class="comment">// Load associated user from session</span></div><div class="line">			<span class="keyword">if</span> (<span class="keyword">null</span> != session) {</div><div class="line">				user = userRepository.findOne(session.getUserId());</div><div class="line">			}</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="comment">// Set security context</span></div><div class="line">		request.setSecurityContext(<span class="keyword">new</span> MySecurityContext(session, user));</div><div class="line">		<span class="keyword">return</span> request;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> ContainerRequestFilter <span class="title">getRequestFilter</span>() {</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> ContainerResponseFilter <span class="title">getResponseFilter</span>() {</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Okay, the hard part is over. All we need now is a way to fire our SecurityContextFilter. For this, we will create a <a href="http://jersey.java.net/nonav/apidocs/latest/jersey/com/sun/jersey/spi/container/ResourceFilterFactory.html" target="_blank" rel="external">ResourceFilterFactory</a>. During application startup, this factory will create a List of filters for all <a href="http://jersey.java.net/nonav/apidocs/latest/jersey/com/sun/jersey/api/model/AbstractMethod.html" target="_blank" rel="external">AbstractMethod</a>s of each of our Resources. We are going to extend <a href="http://jersey.java.net/nonav/apidocs/latest/jersey/com/sun/jersey/api/container/filter/RolesAllowedResourceFilterFactory.html" target="_blank" rel="external">RolesAllowedResourceFilterFactory</a> which will generate all Role based ResourceFilters for us. And then, we will add our SecurityContextFilter on the top of the list with VersionFilter and AuditFilter in the bottom. That way, SecurityContextFilter will executed first because you need to make auth decisions early. VersionFilter will be next. And Audit in the bottom. You want to audit when everything else has been done. No? </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.strumsoft.api;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.ws.rs.ext.Provider;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.flockthere.api.AllowAllVersions;</div><div class="line"><span class="keyword">import</span> com.flockthere.api.audit.Audit;</div><div class="line"><span class="keyword">import</span> com.flockthere.api.resource.interceptor.AuditingFilter;</div><div class="line"><span class="keyword">import</span> com.flockthere.api.resource.interceptor.SecurityContextFilter;</div><div class="line"><span class="keyword">import</span> com.flockthere.api.resource.interceptor.VersionFilter;</div><div class="line"><span class="keyword">import</span> com.sun.jersey.api.container.filter.RolesAllowedResourceFilterFactory;</div><div class="line"><span class="keyword">import</span> com.sun.jersey.api.model.AbstractMethod;</div><div class="line"><span class="keyword">import</span> com.sun.jersey.spi.container.ResourceFilter;</div><div class="line"></div><div class="line"><span class="javadoc">/**</span></div><div class="line"> * FilterFactory to create List of request/response filters to be applied on a particular</div><div class="line"> * AbstractMethod of a resource.</div><div class="line"> * </div><div class="line"> *<span class="javadoctag"> @author</span> &quot;Animesh Kumar &lt;animesh@strumsoft.com&gt;&quot;</div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="annotation">@Component</span> <span class="comment">// let spring manage the lifecycle</span></div><div class="line"><span class="annotation">@Provider</span>  <span class="comment">// register as jersey's provider</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceFilterFactory</span> <span class="keyword">extends</span> <span class="title">RolesAllowedResourceFilterFactory</span> </span>{</div><div class="line"></div><div class="line">	<span class="annotation">@Autowired</span></div><div class="line">	<span class="keyword">private</span> SecurityContextFilter securityContextFilter;</div><div class="line"></div><div class="line">	<span class="comment">// Similar to SecurityContextFilter to check incoming requests for API Version information and</span></div><div class="line">	<span class="comment">// act accordingly</span></div><div class="line">	<span class="annotation">@Autowired</span></div><div class="line">	<span class="keyword">private</span> VersionFilter versionFilter;</div><div class="line"></div><div class="line">	<span class="comment">// Similar to SecurityContextFilter to audit incoming requests</span></div><div class="line">	<span class="annotation">@Autowired</span></div><div class="line">	<span class="keyword">private</span> AuditingFilter auditingFilter;</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">public</span> List&lt;ResourceFilter&gt; create(AbstractMethod am) {</div><div class="line">		<span class="comment">// get filters from RolesAllowedResourceFilterFactory Factory!</span></div><div class="line">		List&lt;ResourceFilter&gt; rolesFilters = <span class="keyword">super</span>.create(am);</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> == rolesFilters) {</div><div class="line">			rolesFilters = <span class="keyword">new</span> ArrayList&lt;ResourceFilter&gt;();</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="comment">// Convert into mutable List, so as to add more filters that we need</span></div><div class="line">		<span class="comment">// (RolesAllowedResourceFilterFactory generates immutable list of filters)</span></div><div class="line">		List&lt;ResourceFilter&gt; filters = <span class="keyword">new</span> ArrayList&lt;ResourceFilter&gt;(rolesFilters);</div><div class="line"></div><div class="line">		<span class="comment">// Load SecurityContext first (this will load security context onto request)</span></div><div class="line">		filters.add(<span class="number">0</span>, securityContextFilter);</div><div class="line"></div><div class="line">		<span class="comment">// Version Control?</span></div><div class="line">		filters.add(versionFilter);</div><div class="line"></div><div class="line">		<span class="comment">// If this abstract method is annotated with @Audit, we will apply AuditFilter to audit</span></div><div class="line">		<span class="comment">// this request.</span></div><div class="line">		<span class="keyword">if</span> (am.isAnnotationPresent(Audit.class)) {</div><div class="line">			filters.add(auditingFilter);</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">return</span> filters;</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>VersionFilter will help control Client’s access to API methods based upon client’s version. Implementation would be similar to SecurityContextFilter. You will need to annotate API methods with @Version(“&gt;1.3”). VersionFilter will read this value (“&gt;1.3”), check request headers for API-Version keys and then decide whether to allow or reject the request. Similarly, AuditFilter will log all such annotated (@Audit(“audit-note”)) API methods. I will not discuss their actual implementations. You can very easily write them based upon your requirement or can remove them altogether if not needed. </p>
<p>Here is how these annotations will look like. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// @Version</span></div><div class="line"><span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="annotation">@Target</span>({ ElementType.METHOD })</div><div class="line"><span class="keyword">public</span> @<span class="class"><span class="keyword">interface</span> <span class="title">Version</span> </span>{</div><div class="line">	String value();</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// @Audit</span></div><div class="line"><span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="annotation">@Target</span>({ ElementType.METHOD })</div><div class="line"><span class="keyword">public</span> @<span class="class"><span class="keyword">interface</span> <span class="title">Audit</span> </span>{</div><div class="line">	String value();</div><div class="line">}</div></pre></td></tr></table></figure>

<p>And now, you will need to update you web.xml to include ResourceFilterFactory </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>REST<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span></div><div class="line">        com.sun.jersey.spi.spring.container.servlet.SpringServlet</div><div class="line">    <span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="comment">&lt;!-- Our resource filter for tangential concerns (security, logging, version etc.) --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>com.sun.jersey.spi.container.ResourceFilters<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>com.strumsoft.api.ResourceFilterFactory<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></div></pre></td></tr></table></figure>

<p>That’s it. All configuration is done. Now, you just need to annotate you Resources. Let’s see how. </p>
<p>Say, you have a BookResource which exposes APIs to create/edit/list books. And you want<br>1. “Editor/Contributor” to be able to create a book, (<strong>@RolesAllowed({ “Editor”, “Contributor” })</strong>)<br>2. Only “Editor” to be able to edit a book, (<strong>@RolesAllowed({ “Editor” })</strong>)<br>3. While, anyone can see all the books. (<strong>@PermitAll</strong>)</p>
<p>Also, let’s say editing a book was released in API 1.3, so any client still using older APIs should not be able to update (<strong>@Version(“&gt;1.3”)</strong>) an existing book. (Assuming you implemented VersionFilter properly)</p>
<p>Additionally, create or edit book should be audited with respective notes “create-book” and “edit-book” given your AuditFilter is in place. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.strumsoft.api;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.ws.rs.FormParam;</div><div class="line"><span class="keyword">import</span> javax.ws.rs.GET;</div><div class="line"><span class="keyword">import</span> javax.ws.rs.POST;</div><div class="line"><span class="keyword">import</span> javax.ws.rs.PUT;</div><div class="line"><span class="keyword">import</span> javax.ws.rs.Produces;</div><div class="line"><span class="keyword">import</span> javax.ws.rs.core.Context;</div><div class="line"><span class="keyword">import</span> javax.ws.rs.core.MediaType;</div><div class="line"><span class="keyword">import</span> javax.ws.rs.core.SecurityContext;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.flockthere.api.audit.Audit;</div><div class="line"></div><div class="line"><span class="javadoc">/**</span></div><div class="line"> * Book Resource</div><div class="line"> * </div><div class="line"> *<span class="javadoctag"> @Path</span>(&quot;/book/&quot;)</div><div class="line"> *<span class="javadoctag"> @author</span> &quot;Animesh Kumar &lt;animesh@strumsoft.com&gt;&quot;</div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="annotation">@Produces</span>({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookResource</span> </span>{</div><div class="line"></div><div class="line">	<span class="comment">// Only Editor and Contributor can create a book entry</span></div><div class="line">	<span class="annotation">@javax</span>.annotation.security.RolesAllowed({ &quot;Editor&quot;, &quot;Contributor&quot; })</div><div class="line">	<span class="annotation">@Audit</span>(&quot;create-book&quot;)  <span class="comment">// Audit</span></div><div class="line">	<span class="annotation">@POST</span></div><div class="line">	<span class="keyword">public</span> Book <span class="title">createBook</span>(@Context SecurityContext sc, @<span class="title">FormParam</span>(&quot;title&quot;) String title,</div><div class="line">			<span class="annotation">@FormParam</span>(&quot;author&quot;) String author, <span class="annotation">@FormParam</span>(&quot;publisher&quot;) String publisher,</div><div class="line">			<span class="annotation">@FormParam</span>(&quot;isbn&quot;) String isbn, <span class="annotation">@FormParam</span>(&quot;edition&quot;) String edition);</div><div class="line"></div><div class="line">	<span class="comment">// Only Editor can edit an existing book entry</span></div><div class="line">	<span class="annotation">@javax</span>.annotation.security.RolesAllowed({ &quot;Editor&quot; })</div><div class="line">	<span class="annotation">@Audit</span>(&quot;edit-book&quot;)   <span class="comment">// Audit</span></div><div class="line">	<span class="annotation">@Version</span>(&quot;&gt;<span class="number">1.3</span>&quot;)  <span class="comment">// Available only on API version 1.3 onwards</span></div><div class="line">	<span class="annotation">@PUT</span></div><div class="line">	<span class="keyword">public</span> Book <span class="title">editBook</span>(@Context SecurityContext sc, @<span class="title">FormParam</span>(&quot;title&quot;) String title,</div><div class="line">			<span class="annotation">@FormParam</span>(&quot;author&quot;) String author, <span class="annotation">@FormParam</span>(&quot;publisher&quot;) String publisher,</div><div class="line">			<span class="annotation">@FormParam</span>(&quot;isbn&quot;) String isbn, <span class="annotation">@FormParam</span>(&quot;edition&quot;) String edition);</div><div class="line"></div><div class="line">	<span class="comment">// Anyone can see these books</span></div><div class="line">	<span class="annotation">@javax</span>.annotation.security.PermitAll</div><div class="line">	<span class="annotation">@GET</span></div><div class="line">	<span class="keyword">public</span> Book <span class="title">listBooks</span>();</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p>And at last, you will need to add <a href="http://jcp.org/en/jsr/detail?id=250" target="_blank" rel="external">jsr250-api</a> to your project dependencies which defines javax.annotation.security.* annotations. </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- securty tags: javax.annotation.security.* (@RolesAllowed, @PermitAll, @DenyAll etc.) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jsr250-api<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></div></pre></td></tr></table></figure>

<p>Chill. :)</p>
]]></content:encoded>
      <comments>http://47billion.com/blog/2012/03/02/securing-versioning-and-auditing-rest-jax-rs-jersey-apis/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[AspectJ + Spring for method click records]]></title>
      <link>http://47billion.com/blog/2011/09/29/aspectj-spring-for-method-click-records/</link>
      <guid>http://47billion.com/blog/2011/09/29/aspectj-spring-for-method-click-records/</guid>
      <pubDate>Thu, 29 Sep 2011 11:50:26 GMT</pubDate>
      <description>
      <![CDATA[<p>In one of the projects we recently did, we had a <a href="http://www.springsource.org/documentation" target="_blank" rel="external">Sprin]]>
      </description>
      <content:encoded><![CDATA[<p>In one of the projects we recently did, we had a <a href="http://www.springsource.org/documentation" target="_blank" rel="external">Spring</a> and <a href="http://jersey.java.net/" target="_blank" rel="external">Jersey</a> based JSON/XML <a href="http://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="external">REST</a> API server. Clients would connect to this API server and access various resources. Now, for one of the reporting scenario, we needed to log <strong>who</strong> accessed <strong>which</strong> API method and <strong>when</strong>. This appeared to be very simple initially. I decided to intercept every http call, and log that.</p>
<p>However, when I dug deep, I found that one method might call another method internally, depending upon the situation. For example, say <strong>User-A</strong> is trying to login from <strong>Device-1</strong>, and he is already logged on to some other device, say <strong>Device-2</strong>. So, <strong>LoginResource</strong> would make a call to <strong>LogoutResouce</strong> to invalidate User-A’s session with <strong>Device-2</strong>. We couldn’t track this just by intercepting http calls. We needed to adopt some other strategy. Initially, I thought of logging each API method with brute force… but that was too inelegant to actually code. Then I looked at <a href="http://www.eclipse.org/aspectj/" target="_blank" rel="external">AspectJ</a>, and I was enlightened.</p>
<p>First, Added AspectJ dependencies to pom.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">dependencies</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- aspectj --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>aspectjtools<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="title">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="title">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;<span class="title">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>

<p>And updated spring config file.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">...</span> <span class="attribute">xsi:schemaLocation</span>=<span class="value">"... http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd ..."</span></span></div><div class="line"> <span class="attribute">xmlns:aop</span>=<span class="value">"http://www.springframework.org/schema/aop"</span> <span class="attribute">...</span> &gt;</div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="title">aop:aspectj-autoproxy</span> <span class="attribute">proxy-target-class</span>=<span class="value">"true"</span> /&gt;</span></div></pre></td></tr></table></figure>

<p>Then created a <a href="http://www.developer.com/java/other/article.php/3556176/An-Introduction-to-Java-Annotations.htm" target="_blank" rel="external">Java Method Annotation</a> class.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"></div><div class="line"><span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="annotation">@Target</span>({ ElementType.METHOD })</div><div class="line"><span class="keyword">public</span> @<span class="class"><span class="keyword">interface</span> <span class="title">RecordClick</span> </span>{</div><div class="line">    String action();  <span class="comment">// Name of the action</span></div><div class="line">    String comment() <span class="keyword">default</span> <span class="string">""</span>; <span class="comment">// Comment, if any?</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>Every method we want to track, I just need to annotate it with @RecordClick. Like this: </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// API to signup</span></div><div class="line"><span class="annotation">@RecordClick</span>(action = &quot;signup&quot;, comment = &quot;User initiated signup&quot;)</div><div class="line"><span class="keyword">public</span> User <span class="title">explicitSignup</span>(String firstName, String lastName, String email, String phone, String password, Role role) <span class="keyword">throws</span> ValidationException {</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// API to signup</span></div><div class="line"><span class="annotation">@RecordClick</span>(action = &quot;signup&quot;, comment = &quot;System initiated signup&quot;)</div><div class="line"><span class="keyword">public</span> User <span class="title">implicitSignup</span>(String email, String phone) <span class="keyword">throws</span> ValidationException {</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// API to signin</span></div><div class="line"><span class="annotation">@RecordClick</span>(action = &quot;signin&quot;, comment = &quot;User initiated signin&quot;)</div><div class="line"><span class="keyword">public</span> Session <span class="title">explicitSignin</span>(String username, String password) {</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Okay, so now I have everything in place. I just need to create an Aspect to advice pertinent methods. So, I will create an <a href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/aop.html#aop-ataspectj" target="_blank" rel="external">Aspect</a> class. This will intercept all public methods that are annotated with @RecordClick annotation, and create a click record for this call. </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">@Aspect</div><div class="line">@Component</div><div class="line">public class RecordClickMethodInterceptor {</div><div class="line"></div><div class="line">	private static final Logger log = LoggerFactory.getLogger(RecordClickMethodInterceptor.class);</div><div class="line"></div><div class="line">	// This will create and save an individual click</div><div class="line">	@Autowired</div><div class="line">	private ClickResource clickResource;</div><div class="line"></div><div class="line">	/**</div><div class="line">	 * Intercepts all public methods annotated with @RecordClick</div><div class="line">	 *</div><div class="line">	 * @param pjp</div><div class="line">	 * @param recordClick</div><div class="line">	 * @return</div><div class="line">	 * @throws Throwable</div><div class="line">	 */</div><div class="line">	@Around(&quot;execution(public * *(..)) &amp;&amp; @annotation(recordClick)&quot;)</div><div class="line">	public Object doClickRecord(ProceedingJoinPoint pjp, RecordClick recordClick) throws Throwable {</div><div class="line">		log.info(&quot;Intercepted method={} with action={}&quot;, pjp.getSignature().getName(), recordClick.action());</div><div class="line"></div><div class="line">		List&lt;String&gt; paramNames = new ArrayList&lt;String&gt;();</div><div class="line">		try {</div><div class="line">			MethodSignature signature = (MethodSignature) pjp.getSignature();</div><div class="line">			// Fetch method argument names.</div><div class="line">			// Note: to enable this, you must compile the code in debug mode.</div><div class="line">			paramNames = Arrays.asList(signature.getParameterNames());</div><div class="line">		} catch (Exception e) {</div><div class="line">			log.error(&quot;Can't record clicks. You must compile the code with debug=true&quot;);</div><div class="line">			// Proceed with method call</div><div class="line">			return pjp.proceed();</div><div class="line">		}</div><div class="line"></div><div class="line">		log.info(&quot;paramNames={}&quot;, paramNames);</div><div class="line"></div><div class="line">		String user = &quot;anonymous&quot;;</div><div class="line">		Map&lt;String, Object&gt; methodArguments = new HashMap&lt;String, Object&gt;();</div><div class="line"></div><div class="line">		int index = 0;</div><div class="line">		// Iterate through method arguments</div><div class="line">		for (Object arg : pjp.getArgs()) {</div><div class="line">			// name of this argument</div><div class="line">			String name = paramNames.get(index++);</div><div class="line">			log.info(&quot;{} ==&gt; {}&quot;, name, arg);</div><div class="line"></div><div class="line">			// if arg is null, skip</div><div class="line">			if (null == arg) {</div><div class="line">				continue;</div><div class="line">			}</div><div class="line"></div><div class="line">			// Fetch user from argument '@Context SecurityContext'</div><div class="line">			if (arg instanceof SecurityContext) {</div><div class="line">				Principal principal = ((SecurityContext) arg).getUserPrincipal();</div><div class="line">				if (null != principal) {</div><div class="line">					log.info(&quot;Found user={}&quot;, principal.getName());</div><div class="line">					user = principal.getName();</div><div class="line">				}</div><div class="line">			}</div><div class="line">			// Fetch user from argument 'Principal principal;</div><div class="line">			else if (arg instanceof Principal) {</div><div class="line">				Principal principal = (Principal) arg;</div><div class="line">				log.info(&quot;Found user={}&quot;, principal.getName());</div><div class="line">				user = principal.getName();</div><div class="line">			}</div><div class="line">			// save to methodArguments</div><div class="line">			else {</div><div class="line">				methodArguments.put(name, arg.toString());</div><div class="line">			}</div><div class="line">		}</div><div class="line"></div><div class="line">		// execute the method</div><div class="line">		Object returned = pjp.proceed();</div><div class="line"></div><div class="line">		// Process the returned value</div><div class="line"></div><div class="line">		// Record this click</div><div class="line">		String action = recordClick.action();</div><div class="line">		String comment = recordClick.comment();</div><div class="line">		clickResource.createClick(user, action, methodArguments, comment);</div><div class="line">		return returned;</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>I also need to compile the code in debug mode, unless I do this, I will not be able to fetch method argument names which I desperately need in order to make any sense of these records. So, I needed to update <a href="http://maven.apache.org/plugins/maven-compiler-plugin/" target="_blank" rel="external">maven-compiler-plugin</a> to enable debug mode. </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">source</span>&gt;</span>${java-version}<span class="tag">&lt;/<span class="title">source</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">target</span>&gt;</span>${java-version}<span class="tag">&lt;/<span class="title">target</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- compile with debug so as to get param names in aspects --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">debug</span>&gt;</span>true<span class="tag">&lt;/<span class="title">debug</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">debuglevel</span>&gt;</span>lines,vars,source<span class="tag">&lt;/<span class="title">debuglevel</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></div></pre></td></tr></table></figure>

<p>That’s it! have fun. :)</p>
]]></content:encoded>
      <comments>http://47billion.com/blog/2011/09/29/aspectj-spring-for-method-click-records/#disqus_comments</comments>
    </item>
    
  </channel>
</rss>